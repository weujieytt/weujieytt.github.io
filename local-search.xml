<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>给hexo Fuid主题博客添加Mac风格代码块</title>
    <link href="/2022/08/06/%E7%BB%99hexo-Fuid%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Mac%E9%A3%8E%E6%A0%BC%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <url>/2022/08/06/%E7%BB%99hexo-Fuid%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Mac%E9%A3%8E%E6%A0%BC%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>目前博客用的是Fuid主题，自带的代码块很丑，想着美化一下。</p><ul><li><ol><li>首先到<code>hexo-theme-fluid</code>主题根目录下<code>source/css/</code> 创建名为<code>macpanel.styl</code>的文件并加入以下内容。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.highlight</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#21252b</span><br>    border-radius: <span class="hljs-number">5px</span><br>    box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">30px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">4</span>)<br>    padding-top: <span class="hljs-number">30px</span><br><br>    &amp;::before<br>      background: <span class="hljs-number">#fc625d</span><br>      border-radius: <span class="hljs-number">50%</span><br>      box-shadow: <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-number">#fdbc40</span>, <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">#35cd4b</span><br>      content: <span class="hljs-string">&#x27; &#x27;</span><br>      height: <span class="hljs-number">12px</span><br>      left: <span class="hljs-number">12px</span><br>      margin-top: -<span class="hljs-number">20px</span><br>      position: absolute<br>      width: <span class="hljs-number">12px</span><br></code></pre></td></tr></table></figure></li><li><ol start="2"><li><p>到管理主题的<code>_config.yml</code>文件还是说<code>_config.fluid.yml</code>文件（取决于你怎么调用主题）的配置文件中修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">custom_css:    <br>        - /css/macpanel<br></code></pre></td></tr></table></figure></li></ol></li></ul><p>    重启博客即可看到效果啦~~如果代码块风格默认没有修改过的话可能会导致：代码块背景是白色的，而mac栏是黑色的，这时候就要去主题配置文件的<code>_config.yml</code>文件（和第2步一样的文件）中修改代码块风格了。    </p><p>    以下是我的博客现在的风格，具体想主题风格可以上See里的连接去看看。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">highlightjs:</span><br>  <span class="hljs-meta"># 在链接中挑选 style 填入</span><br>  <span class="hljs-meta"># Select a style in the link</span><br>  <span class="hljs-meta"># See: https:<span class="hljs-comment">//highlightjs.org/static/demo/</span></span><br><span class="hljs-symbol">  style:</span> <span class="hljs-string">&quot;github dark dimmed&quot;</span><br><span class="hljs-symbol">  style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题记录</tag>
      
      <tag>美化</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/06/hello-world/"/>
    <url>/2022/08/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-title function_">funciton</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">123123</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JS逆向 | WebPack实战（一）</title>
    <link href="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="JS逆向-WebPack实战（一）"><a href="#JS逆向-WebPack实战（一）" class="headerlink" title="JS逆向 | WebPack实战（一）"></a>JS逆向 | WebPack实战（一）</h1><p>    文章配套B站视频，很多话语简略了，建议配着视频看。</p><h2 id="Function-x2F-函数-x2F-方法"><a href="#Function-x2F-函数-x2F-方法" class="headerlink" title="Function&#x2F;函数&#x2F;方法"></a>Function&#x2F;函数&#x2F;方法</h2><p>常规的js函数命名方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 常规function</span><br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>今天的主角，自执行函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//2. 自执行function</span><br>!<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>&#125;()<br><span class="hljs-comment">// =&gt; function a()&#123;&#125; a() </span><br><br><br><span class="hljs-comment">//2.1</span><br>!<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>     <span class="hljs-keyword">var</span> n=&#123;<br>    <span class="hljs-attr">t</span>:<span class="hljs-string">&quot;txt&quot;</span>,<br>    <span class="hljs-attr">exports</span>:&#123;&#125;,<br>    <span class="hljs-attr">n</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function n &quot;</span>)&#125;<br>&#125;<br>&#125;(<span class="hljs-string">&quot;echo this&quot;</span>)<br><br><span class="hljs-comment">//2.2</span><br>!<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>     <span class="hljs-keyword">var</span> n=&#123;<br>    <span class="hljs-attr">t</span>:<span class="hljs-string">&quot;txt&quot;</span>,<br>    <span class="hljs-attr">exports</span>:&#123;&#125;,<br>    <span class="hljs-attr">n</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function n &quot;</span>)&#125;&#125;<br>&#125;(<br>    &#123;<br>        <span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;test&quot;</span>)&#125;<br>    &#125;    <br>)<br><span class="hljs-comment">//([&quot;test&quot;:function()&#123;console.log])</span><br></code></pre></td></tr></table></figure><h2 id="call-x2F-apply-Function"><a href="#call-x2F-apply-Function" class="headerlink" title="call&#x2F;apply Function"></a>call&#x2F;apply Function</h2><p><a href="%5BFunction.prototype.call(">Fcuntion prototype call and  applay</a> - JavaScript | MDN](<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call</a>))</p><blockquote><p> 允许为不同的对象分配和调用属于另一个对象的函数&#x2F;方法。</p></blockquote><p>call和apply的使用效果基本一致，可以让A对象调用B对象的方法：</p><p>    让<code>Vx</code>对象调用<code>_x</code>对象的<code>say()</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Vx</span>=&#123;<br>       <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;一位不愿透露姓名的热心网友&quot;</span>,<br>       <span class="hljs-attr">age</span>:<span class="hljs-string">&quot;18cm&quot;</span><br>&#125;;<br><span class="hljs-keyword">var</span> _x=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;热心网友&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-string">&quot;18mm&quot;</span>,<br>    <span class="hljs-attr">say</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;name:&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&quot; age:&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)&#125;<br>&#125;<br>_x.<span class="hljs-property">say</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">Vx</span>)<br><span class="hljs-comment">//name:一位不愿透露姓名的热心网友 age:18cm</span><br></code></pre></td></tr></table></figure><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-07-24-13-20-39-image.png"></p><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><blockquote><p>webpack 一个静态模块打包器，有入口、出口、loader 和插件，<mark>通过loader加载器对js、css、图片文件等资源进行加载渲染。</mark></p></blockquote><h3 id="WebPack-站点长什么样"><a href="#WebPack-站点长什么样" class="headerlink" title="WebPack 站点长什么样"></a>WebPack 站点长什么样</h3><p>    方法1. 右键查看源码发现只会有js链接文件，没有其他多余的前端信息，f12看元素就会有很多数据。<img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-15-31-18-image.png"></p><p>   方法2. 看Js文件，一般会有一个app.xxxx.js或长得像MD5的文件名，然后js内容有很多a、b、c、d、n…的变量来回调用，反正就是看着乱。</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-15-32-58-image.png"></p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-15-34-27-image.png"></p><h3 id="loader加载器"><a href="#loader加载器" class="headerlink" title="loader加载器"></a>loader加载器</h3><p>   Webpack站点与普通站点的JS代码扣取是不一样的，因为Webpack站点的资源加载是围绕着加载器进行的，然后把<mark>静态资源当作模块传入调用，传入的模块就是参数</mark>，需要加载什么就运行什么模块。</p><p>先简单看一下加载器长相。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-keyword">var</span> t=&#123;&#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">n</span>)&#123;<br>        <span class="hljs-keyword">if</span> (t[n])<br>            <span class="hljs-keyword">return</span> t[n].<span class="hljs-property">exports</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n)<br>        <span class="hljs-keyword">var</span> r = t[n] = &#123;<br>            <span class="hljs-attr">i</span>:n,<br>            <span class="hljs-attr">l</span>:!<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">exports</span>:&#123;&#125;<br>            &#125;;<br>        <span class="hljs-keyword">return</span> e[n].<span class="hljs-title function_">call</span>(r.<span class="hljs-property">exports</span>,r,r.<span class="hljs-property">exports</span>,d),<br>        r.<span class="hljs-property">l</span> = !<span class="hljs-number">0</span>;<br>        r.<span class="hljs-property">exports</span><br>    &#125;<br><br>    <span class="hljs-title function_">d</span>(<span class="hljs-number">1</span>)<br><br>&#125;(<br>    [<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function1&quot;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span>.<span class="hljs-property">i</span>)&#125;,<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function2&quot;</span>)&#125;<br>    ]<br>);<br></code></pre></td></tr></table></figure><h4 id="加载器分析"><a href="#加载器分析" class="headerlink" title="加载器分析"></a>加载器分析</h4><p>  将加载器拆分为两部分：</p><ul><li>函数方法部分：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-keyword">var</span> t=&#123;&#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">n</span>)&#123;<br>        <span class="hljs-keyword">if</span> (t[n])<br>            <span class="hljs-keyword">return</span> t[n].<span class="hljs-property">exports</span>;<br>        <span class="hljs-keyword">var</span> r = t[n] = &#123;<br>            <span class="hljs-attr">i</span>:n,<br>            <span class="hljs-attr">l</span>:!<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">exports</span>:&#123;&#125;<br>            &#125;;<br>        <span class="hljs-keyword">return</span> e[n].<span class="hljs-title function_">call</span>(r.<span class="hljs-property">exports</span>,r,r.<span class="hljs-property">exports</span>,d),<br>        r.<span class="hljs-property">l</span> = !<span class="hljs-number">0</span>;<br>        r.<span class="hljs-property">exports</span><br>    &#125;<br><br>    <span class="hljs-title function_">d</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><ul><li>参数部分：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<br>    [<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function1&quot;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span>.<span class="hljs-property">i</span>)&#125;<br>    ,<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function2&quot;</span>)&#125;<br>    ]<br>)<br><span class="hljs-comment">/* 这里的参数可以是传入数组，也可以是对象，都是经常看见的。</span><br><span class="hljs-comment">*/</span><br>(<br>    &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function1&quot;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span>.<span class="hljs-property">i</span>)&#125;<br>    ,<br>   <span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function2&quot;</span>)&#125;<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><p>加载器是将参数作为一个数组【】传入的，格式为：<code>!function(e)&#123;&#125;(数组)</code>  参数<mark>e</mark>就是传入的数组， 接着看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> t=&#123;&#125;<br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">n</span>)&#123;<br>       <span class="hljs-keyword">if</span> (t[n])<br>           <span class="hljs-keyword">return</span> t[n].<span class="hljs-property">exports</span>;<br>       <span class="hljs-keyword">var</span> r = t[n] = &#123;<br>           <span class="hljs-attr">i</span>:n,<br>           <span class="hljs-attr">l</span>:!<span class="hljs-number">1</span>,<br>           <span class="hljs-attr">exports</span>:&#123;&#125;<br>           &#125;;<br>       <span class="hljs-keyword">return</span> e[n].<span class="hljs-title function_">call</span>(r.<span class="hljs-property">exports</span>,r,r.<span class="hljs-property">exports</span>,d),<br>       r.<span class="hljs-property">l</span> = !<span class="hljs-number">0</span>;<br>       r.<span class="hljs-property">exports</span><br>   &#125;<br><span class="hljs-title function_">d</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>上述代码声明了一个<mark>d</mark>方法并执行，传入<code>1</code>作为参数，<code>d</code>方法中的<code>if (t[n])</code>并没有实际意义，因为<code>t</code>本来就没有声明的，可以缩减为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">n</span>)&#123;<br>        <span class="hljs-keyword">var</span> r = t[n] = &#123;<br>            <span class="hljs-attr">i</span>:n,<br>            <span class="hljs-attr">l</span>:!<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">exports</span>:&#123;&#125;<br>            &#125;;<br>        <span class="hljs-keyword">return</span> e[n].<span class="hljs-title function_">call</span>(r.<span class="hljs-property">exports</span>,r,r.<span class="hljs-property">exports</span>,d),<br>        r.<span class="hljs-property">l</span> = !<span class="hljs-number">0</span>;<br>        r.<span class="hljs-property">exports</span><br>    &#125;<br> <span class="hljs-title function_">d</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>那么<code>r=t[n]=&#123; xxxx&#125; </code> 可以变成 <code>var r  = &#123; xxx&#125;</code>，现在就剩下一句：</p><p><code>return e[n].call(r.exports,r,r.exports,d)</code></p><p>前面说过了，<code>e</code>是传入的参数，也就是数组；<code>n</code>是<code>d(1)</code>传入的值，为<code>1</code>。</p><p><code>r.exports </code>就是<code>r</code>对象里的<code>exports</code>属性为空对象<code>&#123;&#125;</code>。</p><p>转化代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span> 数组[<span class="hljs-number">1</span>].<span class="hljs-title function_">call</span>(&#123;&#125;,r对象,&#123;&#125;,d函数自己)<br><br>--&gt; 继续转换：<br><br><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function2&quot;</span>)<br>&#125;.<span class="hljs-title function_">call</span>(&#123;&#125;,r对象,&#123;&#125;,d函数)<br></code></pre></td></tr></table></figure><p>由于<code>call()</code>方法是用于调用方法的，所以其他参数可以忽略，缩减为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function2&quot;</span>)<br>&#125;.<span class="hljs-title function_">call</span>(d函数)<br></code></pre></td></tr></table></figure><p><mark>加载器并没有太多实际的意义，就是自己调用自己</mark>，只是用来混淆的；</p><p>经过分析后代码可以直接缩减为（当然，只是针对现在这个例子）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-keyword">var</span> t=&#123;&#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;自执行传入的参数是：&quot;</span>+e)<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">n</span>)&#123;<br><br>        <span class="hljs-keyword">return</span> e[n].<span class="hljs-title function_">call</span>(d)<br>    &#125;<br><br>    <span class="hljs-title function_">d</span>(<span class="hljs-number">1</span>)<br><br>&#125;(<br>    [<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function1&quot;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>()&#125;,<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function2&quot;</span>)&#125;<br>    ]<br>);<br></code></pre></td></tr></table></figure><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-07-24-17-39-43-image.png"></p><h4 id="分离加载"><a href="#分离加载" class="headerlink" title="分离加载"></a>分离加载</h4><p>    在模块较多的情况下，webpack会将模块打包成一整个JS模块文件；并使用<code>Window</code>对象的<code>webpackJsonp</code>属性存储起来。然后通过<code>push()</code>方法传入模块。</p><p>如下：</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-07-25-12-31-31-image.png"></p><p>格式为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-variable language_">window</span>[<span class="hljs-string">&quot;webpackJsonp&quot;</span>] =<br> <span class="hljs-variable language_">window</span>[<span class="hljs-string">&quot;webpackJsonp&quot;</span>] || [] ).<span class="hljs-title function_">push</span>([<br>     [<span class="hljs-string">&quot;xx&quot;</span>], &#123;<br>                            <span class="hljs-string">&quot;module&quot;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125; <br>]);<br></code></pre></td></tr></table></figure><p>运行结果：可以理解为appen追加内容，向webpackJsonp属性追加了[xx],和mod数组</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-07-25-12-46-12-image.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>通过两个加载器的两个例子可以看出，加载器的重要性；webpack站点能否成功解析，是围绕着loader加载器和模块资源进行的，加载器好比是一口锅，而模块好似食材；将不一样的食材放入锅中，烹饪的结果都是不一样的。</p></blockquote><h2 id="WebPack实战"><a href="#WebPack实战" class="headerlink" title="WebPack实战"></a>WebPack实战</h2><h3 id="分析加密"><a href="#分析加密" class="headerlink" title="分析加密"></a>分析加密</h3><p>Webpack站点分析的思路主要以下两点：</p><ol><li><p><mark>首先找到食材，也就是定位到加密模块</mark></p></li><li><p><mark>其次找到锅，loader加载器</mark></p></li><li><p>使用加载器去加载模块</p></li></ol><p>    在这里的的难点就是定位加密模块，因为调用加密的地方肯定是只有固定的一两个点，如：登录提交。而加载器则什么地方都在调用（网站图片、css、js等资源  都是通过加载器加载出来的）</p><p>    在上一文《<a href="https://mp.weixin.qq.com/s/1fisk5MumDcCLmSFJWaRpA">JS逆向｜40分钟视频通杀大厂登陆加密</a>》视频中已经讲解了常规加密的快速定位办法，在webpack站点中使用这种定位办法也有概率可能会有效，其实加密点也是有规律的，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. </span><br>xxxxx&#123;<br>    <span class="hljs-attr">a</span>:e.<span class="hljs-property">name</span>,<br>    <span class="hljs-attr">data</span>:e.<span class="hljs-property">data</span>,<br>    <span class="hljs-attr">b</span>:e.<span class="hljs-property">url</span>,<br>    <span class="hljs-attr">c</span>:n<br>&#125;<br></code></pre></td></tr></table></figure><p>这种键值对格式的跟<mark>ajax</mark>请求长得很相似，有可能是请求赋值的地方，也不绝对，只是大家注意就好。</p><p>实战站点：<a href="https://spa2.scrape.center/">https://spa2.scrape.center/</a></p><p>    </p><p>    访问站点右键源码就能发现这是一个webpack网站，数据并不存在于源码之中，是通过XHR获取的JSON数据。</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-15-54-52-image.png"></p><p>发现是这么一个URL请求的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">https://spa2.scrape.center/api/movie/?limit=10&amp;offset=0&amp;token=ODkxMjNjZGJhYjExNjRkYTJiMmQzMWY3NGY2NTE5YjZlNGIyN2M5YiwxNjU5MzM4MDg4<br></code></pre></td></tr></table></figure><p>       翻页观察发现，<code>limit</code>固定不变，<code>offset</code>每次增加<code>10</code>。两个参数分别是展示的数量与展示的开始位置，<code>token</code>是什么信息暂时未知，但是是必须要解开是。</p><p>    通过XHR网络断点对所有XHR请求URL进行匹配，只要URL内包含<code>api/movie</code>关键词就进行下断。</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-16-02-17-image.png"></p><p>成功断下会展示具体在哪个uRL断的</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-16-16-56-image.png"></p><p>观察堆栈挨个找</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-16-42-44-image.png"></p><p>具体找法视频内会详细讲，文字太麻烦了 :sleepy:，一系列操作之后，定位到了加密位置<code>onFetchData</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>(i[<span class="hljs-string">&quot;a&quot;</span>])(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">url</span>.<span class="hljs-property">index</span>, a)<br></code></pre></td></tr></table></figure><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-17-29-51-image.png"></p><p><code>this.$store.state.url.index</code>和<code>e</code>分别是 <code>/api/movie</code>，<code>0</code>（<code>url</code>中的<code>offset</code>翻页值）</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-17-32-51-image.png"></p><p>加密算法也就是：<code>Object(i[&quot;a&quot;])</code> 方法</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-20-10-44-image.png"></p><p>现在把 <mark> i() </mark>的内容扣下来就搞定了，但是<code>i</code>方法里有 <code>n</code>的调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = n.<span class="hljs-title class_">SHA1</span>(r.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>)).<span class="hljs-title function_">toString</span>(n.<span class="hljs-property">enc</span>.<span class="hljs-property">Hex</span>),<br>c = n.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">stringify</span>(n.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>([o, t].<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>)));<br></code></pre></td></tr></table></figure><p>主要就是这两句，<code>n</code>也是我们需要的，查找一下<code>n</code>得值来源，把<code>n</code>也扣取下来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> n = <span class="hljs-title function_">r</span>(<span class="hljs-string">&quot;3452&quot;</span>);<br></code></pre></td></tr></table></figure><p><code>r</code>又是啥？下个断点重新运行看看。</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-20-16-57-image.png"></p><p><code>r</code>如果跟过去发现是一个加载器方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">t</span>) &#123;<br>    <span class="hljs-keyword">if</span> (r[t])<br>        <span class="hljs-keyword">return</span> r[t].<span class="hljs-property">exports</span>;<br>    <span class="hljs-keyword">var</span> n = r[t] = &#123;<br>        <span class="hljs-attr">i</span>: t,<br>        <span class="hljs-attr">l</span>: !<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">exports</span>: &#123;&#125;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> e[t].<span class="hljs-title function_">call</span>(n.<span class="hljs-property">exports</span>, n, n.<span class="hljs-property">exports</span>, c),<br>    n.<span class="hljs-property">l</span> = !<span class="hljs-number">0</span>,<br>    n.<span class="hljs-property">exports</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而<code>r(&quot;3452&quot;)</code> 跟过去，发现很多调用的<code>r(xxx)</code>的</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-01-20-20-13-image.png"></p><p>    这种情况下很多依赖类调用，如果扣不全很可能缺少某个类从而导致报错无法运行；<mark>在依赖少的情况下可以选择缺啥补啥的原则，缺少什么类就去找什么类</mark>。<mark>依赖多的情况下也可以选择把js代码全都摘下来，这样不管有没有用到的方法我代码里都有</mark>。但是十几万行代码运行肯定会影响性能，具体优化办法后续会说明的。</p><h3 id="扣取代码"><a href="#扣取代码" class="headerlink" title="扣取代码"></a>扣取代码</h3><p>    由于案例站点依赖比较多，所以只能演示全扣的办法，首先我们把手上的信息整理一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript">加密方法为 ：e = <span class="hljs-title class_">Object</span>(i[<span class="hljs-string">&quot;a&quot;</span>])(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">url</span>.<span class="hljs-property">index</span>, a);<br><span class="hljs-comment">//</span><br>而 <span class="hljs-title class_">Object</span>(i[<span class="hljs-string">&quot;a&quot;</span>]) 在“7d29”模块里，为：<br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">i</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>((<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-title function_">getTime</span>() / <span class="hljs-number">1e3</span>).<span class="hljs-title function_">toString</span>(), e = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>, r = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(e), i = <span class="hljs-number">0</span>; i &lt; e; i++)<br>                r[i] = <span class="hljs-variable language_">arguments</span>[i];<br>            r.<span class="hljs-title function_">push</span>(t);<br>            <span class="hljs-keyword">var</span> o = n.<span class="hljs-title class_">SHA1</span>(r.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>)).<span class="hljs-title function_">toString</span>(n.<span class="hljs-property">enc</span>.<span class="hljs-property">Hex</span>)<br>              , c = n.<span class="hljs-property">enc</span>.<span class="hljs-property">Base64</span>.<span class="hljs-title function_">stringify</span>(n.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>([o, t].<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>)));<br>            <span class="hljs-keyword">return</span> c<br>        &#125;<br><span class="hljs-comment">//</span><br>里面又又n的依赖调用， 为： <span class="hljs-title function_">r</span>(<span class="hljs-string">&quot;3452&quot;</span>);<br><span class="hljs-comment">//</span><br>r 为：加载器<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">t</span>) &#123;<br>        <span class="hljs-keyword">if</span> (r[t])<br>            <span class="hljs-keyword">return</span> r[t].<span class="hljs-property">exports</span>;<br>        <span class="hljs-keyword">var</span> n = r[t] = &#123;<br>            <span class="hljs-attr">i</span>: t,<br>            <span class="hljs-attr">l</span>: !<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">exports</span>: &#123;&#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> e[t].<span class="hljs-title function_">call</span>(n.<span class="hljs-property">exports</span>, n, n.<span class="hljs-property">exports</span>, c),<br>        n.<span class="hljs-property">l</span> = !<span class="hljs-number">0</span>,<br>        n.<span class="hljs-property">exports</span><br>    &#125;<br><span class="hljs-comment">//</span><br>“<span class="hljs-number">3452</span><span class="hljs-string">&quot;为模块方法：</span><br><span class="hljs-string">       3452: function(t, e, r) &#123;</span><br><span class="hljs-string">        (function(e, n, i) &#123;</span><br><span class="hljs-string">            t.exports = n(r(&quot;</span>21bf<span class="hljs-string">&quot;), r(&quot;</span><span class="hljs-number">3252</span><span class="hljs-string">&quot;), r(&quot;</span><span class="hljs-number">17e1</span><span class="hljs-string">&quot;), r(&quot;</span>a8ce<span class="hljs-string">&quot;), r(&quot;</span><span class="hljs-number">1132</span><span class="hljs-string">&quot;), r(&quot;</span>72fe<span class="hljs-string">&quot;), r(&quot;</span>df2f<span class="hljs-string">&quot;), r(&quot;</span>94f8<span class="hljs-string">&quot;), r(&quot;</span>191b<span class="hljs-string">&quot;), r(&quot;</span>d6e6<span class="hljs-string">&quot;), r(&quot;</span>b86b<span class="hljs-string">&quot;), r(&quot;</span>e61b<span class="hljs-string">&quot;), r(&quot;</span>10b7<span class="hljs-string">&quot;), r(&quot;</span><span class="hljs-number">5980</span><span class="hljs-string">&quot;), r(&quot;</span>7bbc<span class="hljs-string">&quot;), r(&quot;</span>2b79<span class="hljs-string">&quot;), r(&quot;</span>38ba<span class="hljs-string">&quot;), r(&quot;</span>00bb<span class="hljs-string">&quot;), r(&quot;</span>f4ea<span class="hljs-string">&quot;), r(&quot;</span>aaef<span class="hljs-string">&quot;), r(&quot;</span>4ba9<span class="hljs-string">&quot;), r(&quot;</span>81bf<span class="hljs-string">&quot;), r(&quot;</span>a817<span class="hljs-string">&quot;), r(&quot;</span>a11b<span class="hljs-string">&quot;), r(&quot;</span>8cef<span class="hljs-string">&quot;), r(&quot;</span>2a66<span class="hljs-string">&quot;), r(&quot;</span>b86c<span class="hljs-string">&quot;), r(&quot;</span>6d08<span class="hljs-string">&quot;), r(&quot;</span>c198<span class="hljs-string">&quot;), r(&quot;</span>a40e<span class="hljs-string">&quot;), r(&quot;</span>c3b6<span class="hljs-string">&quot;), r(&quot;</span><span class="hljs-number">1382</span><span class="hljs-string">&quot;), r(&quot;</span>3d5a<span class="hljs-string">&quot;))</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        )(0, (function(t) &#123;</span><br><span class="hljs-string">            return t</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        ))</span><br><span class="hljs-string">    &#125;</span><br></code></pre></td></tr></table></figure><p><code>3452</code>模块调用的其他依赖模块太多，直接选择把<code>chunk-4136500c.f3e9bb54.js</code>文件的所有的模块拷贝下来命名为：<code>demo-model1.js</code></p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-02-13-09-13-image.png"></p><p> 把加载器扣出来，然后导入模块文件，然后设置一个全局变量<code>_c</code> ，将加载器<code>c</code>赋值<code>_c</code>导出运行可以发现报错：</p><p>    第二个报错提示：<code>at Object.3846 (d:\文稿\Js逆向\demo-model1.js:727:9)</code> 模块文件的<code>727</code>行报错</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-02-16-39-36-image.png"></p><p>跟过来<code>727</code>行发现又有其他模块调用，应该是缺少了<code> r(&quot;9e1e&quot;) </code>或者<code>r(&quot;86cc&quot;)</code>导致的报错，</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-02-17-14-47-image.png"></p><p>果然搜索也只有一个调用，没有声明的地方。那么又得取扣其他页面代码了。</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-02-17-16-28-image.png"></p><p>全局搜索网页发现，<code>86cc</code>模块的在<code>chunk-vendors.77daf991.js</code> 文件中被声明了，我们也选择将这文件的所有模块拷贝下来并命名为：<code>demo-module2.js</code>。</p><h3 id="自吐算法"><a href="#自吐算法" class="headerlink" title="自吐算法"></a>自吐算法</h3><blockquote><p>上面完整分析了模块与加载器，可谓是你中有我我中有你；由于所有模块都需要经过加载器后调用，所以根据这点特征；可以在调用某个加载模块时，设置一个全局变量，hook所有接下来要调用的模块存储到变量后导出；</p></blockquote><p>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">_load</span> = c;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">_model</span> =  t.<span class="hljs-title function_">toString</span>()+<span class="hljs-string">&quot;:&quot;</span>+(e[t]+<span class="hljs-string">&quot;&quot;</span>)+ <span class="hljs-string">&quot;,&quot;</span>;<br>c = <span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>)&#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">_load</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">_load</span> + t.<span class="hljs-title function_">toString</span>()+<span class="hljs-string">&quot;:&quot;</span>+(e[t]+<span class="hljs-string">&quot;&quot;</span>)+ <span class="hljs-string">&quot;,&quot;</span>;<br>     <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">_load</span>(t);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自动化-Playwright"><a href="#自动化-Playwright" class="headerlink" title="自动化 | Playwright"></a>自动化 | Playwright</h3><blockquote><p>[Playwright official doc ](<a href="https://playwright.dev/">Fast and reliable end-to-end testing for modern web apps | Playwright</a>) </p></blockquote><p>   </p><p>站点源码：<a href="https://mp.weixin.qq.com/s/wgwrUvQKFcG3g6SjKnC5kQ"> Burpy｜一款流量解密插件 </a>，在不扣去加密算法时直接就进行爆破：</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-04-15-28-56-image.png"></p><p>安装好<code>Playwright</code>后cmd输入 <code>python -m playwright codegen</code> ，会弹出一个浏览器，访问要爆破的URL。走一遍登录流程后，<code>Playwright</code>会自动生成流程代码。</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-04-15-33-16-image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> playwright.sync_api <span class="hljs-keyword">import</span> Playwright, sync_playwright, expect<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">playwright: Playwright</span>) -&gt; <span class="hljs-literal">None</span>:<br>    browser = playwright.chromium.launch(headless=<span class="hljs-literal">False</span>)<br>    context = browser.new_context()<br><br>    <span class="hljs-comment"># Open new page</span><br>    page = context.new_page()<br><br>    <span class="hljs-comment"># Click body</span><br>    page.locator(<span class="hljs-string">&quot;body&quot;</span>).click()<br><br>    <span class="hljs-comment"># Go to http://localhost:9988/</span><br>    page.goto(<span class="hljs-string">&quot;http://localhost:9988/&quot;</span>)<br><br>    <span class="hljs-comment"># Click input[name=&quot;userName&quot;]</span><br>    page.locator(<span class="hljs-string">&quot;input[name=\&quot;userName\&quot;]&quot;</span>).click()<br><br>    <span class="hljs-comment"># Fill input[name=&quot;userName&quot;]</span><br>    page.locator(<span class="hljs-string">&quot;input[name=\&quot;userName\&quot;]&quot;</span>).fill(<span class="hljs-string">&quot;123&quot;</span>)<br><br>    <span class="hljs-comment"># Click input[name=&quot;passWord&quot;]</span><br>    page.locator(<span class="hljs-string">&quot;input[name=\&quot;passWord\&quot;]&quot;</span>).click()<br><br>    <span class="hljs-comment"># Fill input[name=&quot;passWord&quot;]</span><br>    page.locator(<span class="hljs-string">&quot;input[name=\&quot;passWord\&quot;]&quot;</span>).fill(<span class="hljs-string">&quot;345&quot;</span>)<br><br>    <span class="hljs-comment"># Click input[type=&quot;submit&quot;]</span><br>    page.locator(<span class="hljs-string">&quot;input[type=\&quot;submit\&quot;]&quot;</span>).click()<br><br>    <span class="hljs-comment"># ---------------------</span><br>    context.close()<br>    browser.close()<br><br><br><span class="hljs-keyword">with</span> sync_playwright() <span class="hljs-keyword">as</span> playwright:<br>    run(playwright)<br></code></pre></td></tr></table></figure><p>上面代码实现很简单，主要的数据部分就是<code>fill()</code>方法，简单修改一下代码将账户密码变量传入过去，然后做个循环即可。至于判断回显使用<code>page.on()</code>对<code>response</code>进行监听，根据响应长度，密码错误回显为error五个字符长度，大于5则认为成功</p><p><img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-04-15-45-41-image.png"></p><p>运行结果：账户密码为123，123，加密密文为：<code>PomtfmGnIAN54uvLYlgbH+CN/3mhNQdaAR/7+vFOAuU=</code></p><p>    <img src="/2022/07/29/JS%E9%80%86%E5%90%91-WebPack%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/2022-08-04-15-49-01-image.png"></p><p>关于接入验证码就不演示了，第三方像超级鹰这类的平台都已经将识别模块打包好，导入简单修改就能用了，网上文章也相当多，本文还是以JS逆向为主线。</p>]]></content>
    
    
    <categories>
      
      <category>JS逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS逆向</tag>
      
      <tag>逆向</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
